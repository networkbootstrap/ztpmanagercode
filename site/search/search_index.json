{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome This set of docs will guide you through installation and use of ZTPManager. What is this ZTPManager? ZTPManager is an application manager for the ISC-DHCP-SERVER which configures it for use in Zero Touch Provisioning (ZTP) scenarios. Initially created for Junos but with some feature enhancements can probably be used for other vendors. ZTPManager does: Configures dhcpd.conf file with basic info and hosts for each ZTP client. Creates initial configurations from templates for Juniper devices. Manages isc-dhcp-server file and serving interfaces. Provides a HTTP JSON API for configuration (super simple). Installs the ISC-DHCP-SERVER. You basically get your life back and stop trying to figure out how to configure a DHCP server for ZTP.","title":"Welcome"},{"location":"#welcome","text":"This set of docs will guide you through installation and use of ZTPManager.","title":"Welcome"},{"location":"#what-is-this-ztpmanager","text":"ZTPManager is an application manager for the ISC-DHCP-SERVER which configures it for use in Zero Touch Provisioning (ZTP) scenarios. Initially created for Junos but with some feature enhancements can probably be used for other vendors. ZTPManager does: Configures dhcpd.conf file with basic info and hosts for each ZTP client. Creates initial configurations from templates for Juniper devices. Manages isc-dhcp-server file and serving interfaces. Provides a HTTP JSON API for configuration (super simple). Installs the ISC-DHCP-SERVER. You basically get your life back and stop trying to figure out how to configure a DHCP server for ZTP.","title":"What is this ZTPManager?"},{"location":"installation/","text":"Installation Guide ZTPManager can be installed through a one line install procedure, or you can compile from source and place the files manually. One-Line Installer This is the easiest to get started with ZTPManager but it does rely on pulling a pre-compiled binary down from GitHub for x64_x86 architecture. If you don't like that and you think there might be some nasties hiding away, that's fine. Go check out the manual approach! The installer does this: Install ISC-DHCP-SERVER Install git Does a git clone of the ztpmanagerassets repository Writes elements of the configuration file from script input Creates config and images directories Launches ZTPmanager with the HTTP file interface running on port 80 and the configuration API running on port 1323. How to run this wonder? You must know what the interface on the server is that you would like to serve DHCP. In the case below it's ens34 . Secondly, you must know what URL you would like to access the server on. This could be a FQDN or just an IP address. Make sure you have curl installed. On Ubuntu this can be installed with sudo apt install curl . Here is the one line install. Copy and paste this in to your terminal. sudo curl -sSL https://raw.githubusercontent.com/networkbootstrap/ztpmanager/master/install.sh | bash -s -- --url=ztp.simpledemo.net --iface=ens34 Manual In order to do a manual isntall, you're required to have the Go tool-chain installed (written in 1.10), install the dependencies, build and them download the required assets to finish off the installation. As the 'New Kids on the Block' would say, step-by-step: Clone the code repository git clone https://github.com/networkbootstrap/ztpmanagercode.git Grab the dependencies dep ensure Compile for your target operating system GOOS=linux go build Create a directory on the target machine mkdir ztpmanager Copy the binary to the target machine using SCP or your favourite tool Create configs and images direcory on the target machine mkdir configs mkdir images Check that port TCP 80 is free on the target machine, this is where the files are served from. Also check for 1323 or the API port. ss -aln | grep \"80 \" ss -aln | grep \"1323 \" Change config file lines that need changing (see section 'Config File') Install ISC-DHCP-SERVER version 4.3.5 ` sudo apt-get install -y isc-dhcp-server=4.3.5-3ubuntu7 Start the binary sudo ./binary_name -config config.toml Do a quick check to make sure everything is operational. Read Usage on how to use it. curl -X GET REPLACE_WITH_SERVER_IP:1323/hosts If you don't have any hosts configured in the config.toml then you won't get any meaningful data, but you'll still get a HTTP response code in the 200 range. These docs are work in progress and will be updated regularly","title":"Installation Guide"},{"location":"installation/#installation-guide","text":"ZTPManager can be installed through a one line install procedure, or you can compile from source and place the files manually.","title":"Installation Guide"},{"location":"installation/#one-line-installer","text":"This is the easiest to get started with ZTPManager but it does rely on pulling a pre-compiled binary down from GitHub for x64_x86 architecture. If you don't like that and you think there might be some nasties hiding away, that's fine. Go check out the manual approach! The installer does this: Install ISC-DHCP-SERVER Install git Does a git clone of the ztpmanagerassets repository Writes elements of the configuration file from script input Creates config and images directories Launches ZTPmanager with the HTTP file interface running on port 80 and the configuration API running on port 1323. How to run this wonder? You must know what the interface on the server is that you would like to serve DHCP. In the case below it's ens34 . Secondly, you must know what URL you would like to access the server on. This could be a FQDN or just an IP address. Make sure you have curl installed. On Ubuntu this can be installed with sudo apt install curl . Here is the one line install. Copy and paste this in to your terminal. sudo curl -sSL https://raw.githubusercontent.com/networkbootstrap/ztpmanager/master/install.sh | bash -s -- --url=ztp.simpledemo.net --iface=ens34","title":"One-Line Installer"},{"location":"installation/#manual","text":"In order to do a manual isntall, you're required to have the Go tool-chain installed (written in 1.10), install the dependencies, build and them download the required assets to finish off the installation. As the 'New Kids on the Block' would say, step-by-step: Clone the code repository git clone https://github.com/networkbootstrap/ztpmanagercode.git Grab the dependencies dep ensure Compile for your target operating system GOOS=linux go build Create a directory on the target machine mkdir ztpmanager Copy the binary to the target machine using SCP or your favourite tool Create configs and images direcory on the target machine mkdir configs mkdir images Check that port TCP 80 is free on the target machine, this is where the files are served from. Also check for 1323 or the API port. ss -aln | grep \"80 \" ss -aln | grep \"1323 \" Change config file lines that need changing (see section 'Config File') Install ISC-DHCP-SERVER version 4.3.5 ` sudo apt-get install -y isc-dhcp-server=4.3.5-3ubuntu7 Start the binary sudo ./binary_name -config config.toml Do a quick check to make sure everything is operational. Read Usage on how to use it. curl -X GET REPLACE_WITH_SERVER_IP:1323/hosts If you don't have any hosts configured in the config.toml then you won't get any meaningful data, but you'll still get a HTTP response code in the 200 range. These docs are work in progress and will be updated regularly","title":"Manual"},{"location":"usage/","text":"Usage This project is simple to configure and simple to use providing you understand the rules. Any change made via the HTTP JSON API must be saved through the API If you change the contents of the config.toml file, reload the application to force a configuration read The webserver running on port 80 will serve the contents of configs and images . The locations of which are read from the config.toml Templates for the initial configuration are stored in the templates/vendor/vendor.template pattern Config.Toml This file contains the core configuration required to bootstrap the ZTPManager. Host information can also go in here if you're confident enough to create the entries. The JSON API actually drives an operation that does this anyway. To re-word this, if you do a POST operation on /hosts, the application adds the new host to this file as well as holding the information in memory. What follows is the generic config.toml file contents and an explanation of each field. [Core] ServerURL = localhost ServerPort = 1323 HTTPConfigsLocation = configs HTTPImagesLocation = images FileConfigsLocation = ./configs FileImagesLocation = ./images DHCPDPath = /etc/dhcp/dhcpd.conf DHCPPath = /etc/default/isc-dhcp-server DHCPIface = ens34 DomainName = simpledemo.net DNSServers = [ 8.8.8.8 , 8.8.4.4 ] DefaultLease = 600 MaxLease = 7200 Subnet = 192.168.50.0 SubnetMask = 255.255.255.0 NonCfgRangeLow = 192.168.50.20 NonCfgRangeHigh = 192.168.50.25 SubnetRouter = 192.168.50.1 TransferMode = http FileServer = 192.168.50.254 NTPServers = [ 192.168.50.254 ] [Hosts] [Hosts. 192.168.50.100 ] Ethernet = 00:0c:29:4d:3d:cc FixedIP = 192.168.50.100 HostName = demo01 Vendor = junos CfgImage = HTTP JSON API","title":"Usage"},{"location":"usage/#usage","text":"This project is simple to configure and simple to use providing you understand the rules. Any change made via the HTTP JSON API must be saved through the API If you change the contents of the config.toml file, reload the application to force a configuration read The webserver running on port 80 will serve the contents of configs and images . The locations of which are read from the config.toml Templates for the initial configuration are stored in the templates/vendor/vendor.template pattern","title":"Usage"},{"location":"usage/#configtoml","text":"This file contains the core configuration required to bootstrap the ZTPManager. Host information can also go in here if you're confident enough to create the entries. The JSON API actually drives an operation that does this anyway. To re-word this, if you do a POST operation on /hosts, the application adds the new host to this file as well as holding the information in memory. What follows is the generic config.toml file contents and an explanation of each field. [Core] ServerURL = localhost ServerPort = 1323 HTTPConfigsLocation = configs HTTPImagesLocation = images FileConfigsLocation = ./configs FileImagesLocation = ./images DHCPDPath = /etc/dhcp/dhcpd.conf DHCPPath = /etc/default/isc-dhcp-server DHCPIface = ens34 DomainName = simpledemo.net DNSServers = [ 8.8.8.8 , 8.8.4.4 ] DefaultLease = 600 MaxLease = 7200 Subnet = 192.168.50.0 SubnetMask = 255.255.255.0 NonCfgRangeLow = 192.168.50.20 NonCfgRangeHigh = 192.168.50.25 SubnetRouter = 192.168.50.1 TransferMode = http FileServer = 192.168.50.254 NTPServers = [ 192.168.50.254 ] [Hosts] [Hosts. 192.168.50.100 ] Ethernet = 00:0c:29:4d:3d:cc FixedIP = 192.168.50.100 HostName = demo01 Vendor = junos CfgImage =","title":"Config.Toml"},{"location":"usage/#http-json-api","text":"","title":"HTTP JSON API"}]}